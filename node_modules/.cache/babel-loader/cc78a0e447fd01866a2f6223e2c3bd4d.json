{"ast":null,"code":"var _jsxFileName = \"/Users/nnannaforever/to-do-app/src/components/TodoForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; //everytime you use a useState you have to import the useState too\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TodoForm(props) {\n  _s();\n\n  /* below a state is being created \n    1. input acts like a dynamic (global) variable for this component \n    2. setInput is a function that you call to change the variable\n    3. to define a useState you assign an array to a variable  \n    and the first index is the var and second index is always the set state !important  */\n  const [input, setInput] = useState(\"\"); //creates a state and useState is a react hook which I have set to an empty string\n  //arrow function that passes an event because submit is an event\n\n  const handleSubmit = e => {\n    e.preventDefault(); //prevents the page refreshing after submit pressed\n\n    props.addTodo(input);\n    setInput(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"todo-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: input // after input has been added value=input sets it back to nothing\n\n      /* onChange detects when the value of an input element changes \n        then arrow function passes event => event target value \n        which is the user text typed to the setInput state */\n      ,\n      onChange: e => setInput(e.target.value),\n      className: \"todo-input\",\n      placeholder: \"Add a todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"todo-button\",\n      children: \"Add Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoForm, \"RL+Zbs2TIka0YpcBOJptmHqCgYA=\");\n\n_c = TodoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["React","useState","TodoForm","props","input","setInput","handleSubmit","e","preventDefault","addTodo","target","value"],"sources":["/Users/nnannaforever/to-do-app/src/components/TodoForm.js"],"sourcesContent":["import React, { useState } from \"react\"; //everytime you use a useState you have to import the useState too\n\nexport default function TodoForm(props) {\n  /* below a state is being created \n    1. input acts like a dynamic (global) variable for this component \n    2. setInput is a function that you call to change the variable\n    3. to define a useState you assign an array to a variable  \n    and the first index is the var and second index is always the set state !important  */\n  const [input, setInput] = useState(\"\"); //creates a state and useState is a react hook which I have set to an empty string\n\n  //arrow function that passes an event because submit is an event\n  const handleSubmit = (e) => {\n    e.preventDefault()//prevents the page refreshing after submit pressed\n    props.addTodo(input)\n    setInput(\"\")\n  }\n  return (\n    <form onSubmit={handleSubmit} className=\"todo-form\">\n      <input\n        value={input}// after input has been added value=input sets it back to nothing\n        \n      /* onChange detects when the value of an input element changes \n        then arrow function passes event => event target value \n        which is the user text typed to the setInput state */\n        onChange={(e) => setInput(e.target.value)} \n        className=\"todo-input\"\n        placeholder=\"Add a todo\"\n      />\n      <button type=\"submit\" className=\"todo-button\">Add Todo</button>\n    </form>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAAyC;;;AAEzC,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EACtC;AACF;AACA;AACA;AACA;EACE,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CANsC,CAME;EAExC;;EACA,MAAMK,YAAY,GAAIC,CAAD,IAAO;IAC1BA,CAAC,CAACC,cAAF,GAD0B,CACR;;IAClBL,KAAK,CAACM,OAAN,CAAcL,KAAd;IACAC,QAAQ,CAAC,EAAD,CAAR;EACD,CAJD;;EAKA,oBACE;IAAM,QAAQ,EAAEC,YAAhB;IAA8B,SAAS,EAAC,WAAxC;IAAA,wBACE;MACE,KAAK,EAAEF,KADT,CACe;;MAEf;AACN;AACA;MALM;MAME,QAAQ,EAAGG,CAAD,IAAOF,QAAQ,CAACE,CAAC,CAACG,MAAF,CAASC,KAAV,CAN3B;MAOE,SAAS,EAAC,YAPZ;MAQE,WAAW,EAAC;IARd;MAAA;MAAA;MAAA;IAAA,QADF,eAWE;MAAQ,IAAI,EAAC,QAAb;MAAsB,SAAS,EAAC,aAAhC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAXF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD;;GA7BuBT,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}