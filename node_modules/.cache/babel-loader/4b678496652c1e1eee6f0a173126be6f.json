{"ast":null,"code":"import _slicedToArray from\"/Users/nnannaforever/to-do-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";//everytime you use a useState you have to import the useState too\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function TodoForm(props){/* below a state is being created \n    1. input acts like a dynamic (global) variable for this component \n    2. setInput is a function that you call to change the variable\n    3. to define a useState you assign an array to a variable  \n    and the first index is the var and second index is always the set state !important  */var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),input=_useState2[0],setInput=_useState2[1];//creates a state and useState is a react hook which I have set to an empty string\n//arrow function that passes an event because submit is an event\nvar handleSubmit=function handleSubmit(e){e.preventDefault();//prevents the page refreshing after submit pressed\nprops.addTodo(input);setInput(\"\");};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"todo-form\",children:[/*#__PURE__*/_jsx(\"input\",{value:input// after input has been added value=input sets it back to nothing\n/* onChange detects when the value of an input element changes \n        then arrow function passes event => event target value \n        which is the user text typed to the setInput state */,onChange:function onChange(e){return setInput(e.target.value);},className:\"todo-input\",placeholder:\"Add a todo\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"todo-button\",children:\"Add\"})]});}","map":{"version":3,"names":["React","useState","TodoForm","props","input","setInput","handleSubmit","e","preventDefault","addTodo","target","value"],"sources":["/Users/nnannaforever/to-do-app/src/components/TodoForm.js"],"sourcesContent":["import React, { useState } from \"react\"; //everytime you use a useState you have to import the useState too\n\nexport default function TodoForm(props) {\n  /* below a state is being created \n    1. input acts like a dynamic (global) variable for this component \n    2. setInput is a function that you call to change the variable\n    3. to define a useState you assign an array to a variable  \n    and the first index is the var and second index is always the set state !important  */\n  const [input, setInput] = useState(\"\"); //creates a state and useState is a react hook which I have set to an empty string\n\n  //arrow function that passes an event because submit is an event\n  const handleSubmit = (e) => {\n    e.preventDefault()//prevents the page refreshing after submit pressed\n    props.addTodo(input)\n    setInput(\"\")\n  }\n  return (\n    <form onSubmit={handleSubmit} className=\"todo-form\">\n      <input\n        value={input}// after input has been added value=input sets it back to nothing\n\n      /* onChange detects when the value of an input element changes \n        then arrow function passes event => event target value \n        which is the user text typed to the setInput state */\n        onChange={(e) => setInput(e.target.value)} \n        className=\"todo-input\"\n        placeholder=\"Add a todo\"\n      />\n      <button type=\"submit\" className=\"todo-button\">Add</button>\n    </form>\n  );\n}\n"],"mappings":"oHAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAAyC;wFAEzC,cAAe,SAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CACtC;AACF;AACA;AACA;AACA,0FACE,cAA0BF,QAAQ,CAAC,EAAD,CAAlC,wCAAOG,KAAP,eAAcC,QAAd,eAAwC;AAExC;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CAC1BA,CAAC,CAACC,cAAF,GAAkB;AAClBL,KAAK,CAACM,OAAN,CAAcL,KAAd,EACAC,QAAQ,CAAC,EAAD,CAAR,CACD,CAJD,CAKA,mBACE,cAAM,QAAQ,CAAEC,YAAhB,CAA8B,SAAS,CAAC,WAAxC,wBACE,cACE,KAAK,CAAEF,KAAM;AAEf;AACN;AACA,6DALM,CAME,QAAQ,CAAE,kBAACG,CAAD,QAAOF,CAAAA,QAAQ,CAACE,CAAC,CAACG,MAAF,CAASC,KAAV,CAAf,EANZ,CAOE,SAAS,CAAC,YAPZ,CAQE,WAAW,CAAC,YARd,EADF,cAWE,eAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAC,aAAhC,iBAXF,GADF,CAeD"},"metadata":{},"sourceType":"module"}